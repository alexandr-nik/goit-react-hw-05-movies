{"version":3,"file":"static/js/219.cd867ad1.chunk.js","mappings":"kSACaA,EAAKC,EAAAA,GAAAA,GAAH,4EAKFC,EAAID,EAAAA,GAAAA,EAAH,+CAGDE,EAAKF,EAAAA,GAAAA,GAAH,wGAKFG,EAAMH,EAAAA,GAAAA,IAAH,kE,SCgDhB,EAvDa,WACX,IAAQI,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAyCE,EAAAA,EAAAA,UAAS,IAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA4BJ,EAAAA,EAAAA,WAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,KA4BA,OA1BAC,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACX,IAAMI,EAAa,IAAIC,gBACjBC,EAAQ,mCAAG,wGAEPC,EAAAA,EAAAA,IAAiBb,EAAI,CACzBc,OAAQJ,EAAWI,SAElBC,MAAK,SAAAC,GAEJ,OADAZ,EAAiBY,EAAQC,KAAKC,MACvBF,EAAQC,KAAKC,IACrB,IACAH,MAAK,SAAAI,GACCA,EAAIC,QAAQZ,GAAU,EAC5B,IAXU,6DAaba,EAAAA,EAAAA,GAAQ,EAAD,IACD,IAAIC,MAAJ,MAdO,uBAgBbhB,GAAW,GAhBE,0EAAH,qDAoBd,OADAM,IACOF,EAAWa,OACnB,GAAE,CAACvB,KAGF,UAACL,EAAD,WACGU,IAAW,yCACXF,EAAaiB,QAAU,GACtBjB,EAAaqB,KAAI,SAACC,EAAIC,GACpB,OACE,UAAC5B,EAAD,YACE,SAACC,EAAD,CACE4B,IACEF,EAAGG,aAAH,yCACsCH,EAAGG,cADzC,UAEOC,GAETC,IAAKL,EAAGM,MAAQN,EAAGO,iBAErB,uBAAIP,EAAGO,kBATAN,EAYZ,KACDnB,IAAU,SAACV,EAAD,2CAGjB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import styled from 'styled-components';\nexport const Ul = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\nexport const P = styled.p`\n  text-align: center;\n`;\nexport const Li = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nexport const Img = styled.img`\n  max-width: 150px;\n  max-height: auto;\n`;\n","import { ApiTmdbCastMovie } from 'services/ApiTmdb/ApiTmdb';\nimport { message } from 'components/message/message';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport noImage from '../../image/no-image.png';\nimport { Img, Li, P, Ul } from './Cast.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [creditsMovie, setCreditstMovie] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [noCast, setNoCast] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    const controller = new AbortController();\n    const getMovie = async () => {\n      try {\n        await ApiTmdbCastMovie(id, {\n          signal: controller.signal,\n        })\n          .then(results => {\n            setCreditstMovie(results.data.cast);\n            return results.data.cast;\n          })\n          .then(res => {\n            if (!res.length) setNoCast(false);\n          });\n      } catch (error) {\n        message(error);\n        throw new Error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getMovie();\n    return controller.abort();\n  }, [id]);\n\n  return (\n    <Ul>\n      {loading && <div>Loading....</div>}\n      {creditsMovie.length >= 1 &&\n        creditsMovie.map((el, index) => {\n          return (\n            <Li key={index}>\n              <Img\n                src={\n                  el.profile_path\n                    ? `https://image.tmdb.org/t/p/w500${el.profile_path}`\n                    : `${noImage}`\n                }\n                alt={el.name || el.original_name}\n              />\n              <p>{el.original_name}</p>\n            </Li>\n          );\n        })}\n      {!noCast && <P>Sorry no cast on this film</P>}\n    </Ul>\n  );\n};\nexport default Cast;\n"],"names":["Ul","styled","P","Li","Img","id","useParams","useState","creditsMovie","setCreditstMovie","loading","setLoading","noCast","setNoCast","useEffect","controller","AbortController","getMovie","ApiTmdbCastMovie","signal","then","results","data","cast","res","length","message","Error","abort","map","el","index","src","profile_path","noImage","alt","name","original_name"],"sourceRoot":""}